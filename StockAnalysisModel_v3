# Stock Analysis App for Google Colab (Morningstar-Inspired with Star System and NewsAPI Headlines)
# Instructions:
# 1. Open Google Colab (colab.research.google.com).
# 2. Copy and paste this code into a single code cell.
# 3. Run the cell to install dependencies and execute the app.
# 4. Select a time horizon, enter a ticker (e.g., THEON.AS, AAPL), and click "Analyze Stock".
# 5. View the results with a summary table (stars), total score (stars), and real NewsAPI headlines from Reuters, Yahoo Finance, NPR, CBS News, TheStreet, and Benzinga.
# Note: Handles Yahoo Finance rate limits with exponential backoff and caching. If rate-limited, wait 60 seconds and retry. Headlines include source links. If fewer than 5 headlines are found, a message like "No other recent headlines found" appears. If no headlines are found, the app displays "No recent news headlines found" and may note "NewsAPI key may be invalid or rate-limited." Sentiment is based on Yahoo Finance, with a neutral score (5.0/10) if no news is available.

# Install dependencies
!pip install yfinance pandas numpy scikit-learn ipywidgets requests beautifulsoup4 textblob -q

import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from datetime import datetime, timedelta
import warnings
import ipywidgets as widgets
from IPython.display import display, clear_output
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import time
import pickle

warnings.filterwarnings('ignore')

# Hardcoded NewsAPI key
newsapi_key = "3b79c316efb74c50b14ca2f6d3b00f19"

# Cache for stock data
stock_data_cache = {}

def get_stock_data(ticker, period='5y', retries=5):
    """Fetch historical stock data and financial metrics with validation, retries, and caching."""
    cache_key = f"{ticker}_{period}"
    if cache_key in stock_data_cache:
        print(f"Using cached data for {ticker}")
        return stock_data_cache[cache_key]
    
    for attempt in range(retries):
        try:
            stock = yf.Ticker(ticker)
            hist = stock.history(period=period)
            
            # Check if historical data is sufficient (min 1 year)
            if hist.empty or len(hist) < 252:  # ~1 year of trading days
                suffixes = ['.AS', '.PA', '.DE', '.L']
                for suffix in suffixes:
                    try:
                        stock = yf.Ticker(ticker + suffix)
                        hist = stock.history(period=period)
                        if not hist.empty and len(hist) >= 252:
                            ticker = ticker + suffix
                            break
                    except:
                        continue
                if hist.empty or len(hist) < 252:
                    print(f"Warning: Limited historical data for {ticker} ({len(hist)} days). Proceeding with available data.")
            
            # Calculate technical indicators
            hist['MA50'] = hist['Close'].rolling(window=50).mean()
            hist['MA200'] = hist['Close'].rolling(window=200).mean()
            hist['Volatility'] = hist['Close'].rolling(window=50).std()
            hist['Momentum'] = hist['Close'].pct_change(periods=10)
            hist['RSI'] = compute_rsi(hist['Close'])
            
            # Fetch fundamental data with fallbacks
            info = stock.info or {}
            fundamentals = {
                'PE_Ratio': info.get('trailingPE', 20.0),  # Default: median market P/E
                'EPS': info.get('trailingEps', 0.0),
                'Revenue_Growth': info.get('revenueGrowth', 0.0),
                'Free_Cash_Flow': info.get('freeCashflow', 0.0),
                'ROE': info.get('returnOnEquity', 0.0),
                'Debt_to_Equity': info.get('debtToEquity', 1.0) / 100 if info.get('debtToEquity') else 1.0,  # Default: neutral ratio
                'Sector': info.get('sector', 'Unknown'),
                'Market_Cap': info.get('marketCap', 1e9),  # Default: $1B
                'Company_Name': info.get('longName', ticker)  # For NewsAPI queries
            }
            
            # Cache the result
            stock_data_cache[cache_key] = (hist, fundamentals, ticker)
            return hist, fundamentals, ticker
        except Exception as e:
            if "Too Many Requests" in str(e):
                wait_time = 2 ** attempt  # Exponential backoff: 1s, 2s, 4s, 8s, 16s
                print(f"Rate limit hit for {ticker}. Waiting {wait_time} seconds before retry {attempt + 1}/{retries}...")
                time.sleep(wait_time)
            elif attempt < retries - 1:
                time.sleep(1)  # Wait before retrying for other errors
            else:
                raise ValueError(f"Failed to retrieve data for {ticker} after {retries} attempts: {str(e)}. If rate-limited, wait 60 seconds and try again. The ticker may be delisted, have insufficient data, or be incorrect. Try including the exchange suffix (e.g., THEON.AS).")

def compute_rsi(series, periods=14):
    """Calculate Relative Strength Index (RSI)."""
    delta = series.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=periods).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=periods).mean()
    rs = gain / loss
    return 100 - (100 / (1 + rs))

def get_sentiment(ticker):
    """Fetch and analyze sentiment from Yahoo Finance news headlines."""
    try:
        url = f"https://finance.yahoo.com/quote/{ticker}/news/"
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        headlines = soup.find_all('h3', class_='Mb(5px)')
        if not headlines:
            return 5.0, "No news available, neutral score assigned"  # Neutral score
        
        sentiments = []
        for headline in headlines[:5]:
            text = headline.get_text()
            analysis = TextBlob(text)
            sentiment = analysis.sentiment.polarity  # -1 to 1
            sentiments.append(sentiment)
        
        avg_sentiment = np.mean(sentiments) if sentiments else 0
        sentiment_score = (avg_sentiment + 1) * 5  # Convert -1:1 to 0:10
        return min(max(sentiment_score, 0), 10), "Yahoo Finance news sentiment"
    except Exception:
        return 5.0, "No news available, neutral score assigned"  # Neutral score on failure

def get_news_headlines(ticker, company_name):
    """Fetch real headlines from NewsAPI, limited to Reuters, Yahoo Finance, NPR, CBS News, TheStreet, Benzinga."""
    try:
        sources = "reuters,yahoo-finance,npr,cbs-news,thestreet,benzinga"
        url = f"https://newsapi.org/v2/everything?q={company_name}&sources={sources}&sortBy=publishedAt&apiKey={newsapi_key}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        headlines = []
        if data['status'] == 'ok' and data['totalResults'] > 0:
            for article in data['articles'][:5]:
                title = article.get('title', '')
                source = article.get('source', {}).get('name', 'Unknown')
                date = article.get('publishedAt', '')
                url = article.get('url', '')
                if date:
                    date = datetime.strptime(date, '%Y-%m-%dT%H:%M:%SZ').strftime('%B %d, %Y')
                else:
                    date = datetime.now().strftime('%B %d, %Y')
                headlines.append({"title": title, "source": source, "date": date, "url": url})
        
        if not headlines:
            return None  # Indicate no headlines found
        
        return headlines
    except Exception as e:
        print(f"Warning: Failed to fetch NewsAPI headlines for {ticker}: {str(e)}")
        return None

def get_sector_resilience(sector):
    """Assign resilience score based on sector."""
    resilience_scores = {
        'Industrials': 8,
        'Technology': 6,
        'Financial Services': 7,
        'Healthcare': 8,
        'Consumer Discretionary': 5,
        'Unknown': 5
    }
    return resilience_scores.get(sector, 5)

def prepare_data(hist, fundamentals, sentiment=None, horizon_months=12):
    """Prepare features for the ML model with user-specified time horizon."""
    df = hist[['Close', 'MA50', 'MA200', 'Volatility', 'Momentum', 'RSI']].dropna()
    
    for key, value in fundamentals.items():
        if key not in ['Sector', 'Market_Cap', 'Company_Name']:
            df[key] = value
    
    if sentiment is not None:
        df['Sentiment'] = sentiment
    
    trading_days = int(horizon_months * 21)
    df['Future_Return'] = df['Close'].pct_change(periods=trading_days).shift(-trading_days)
    
    # Clip Future_Return to prevent extreme targets
    df['Future_Return'] = df['Future_Return'].clip(-0.5, 0.5)
    df = df.dropna()
    
    if len(df) < 2:
        print("Warning: Limited data after processing. Results may be less reliable.")
    
    return df

def train_model(df):
    """Train a Random Forest model."""
    X = df.drop(['Future_Return', 'Close'], axis=1)
    y = df['Future_Return']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
    model.fit(X_train_scaled, y_train)
    
    score = model.score(X_test_scaled, y_test)
    return model, scaler, score

def score_to_stars(score):
    """Convert 0-10 score to 1-5 star rating."""
    if score <= 2:
        return '★☆☆☆☆'
    elif score <= 4:
        return '★★☆☆☆'
    elif score <= 6:
        return '★★★☆☆'
    elif score <= 8:
        return '★★★★☆'
    else:
        return '★★★★★'

def total_score_to_stars(total_score):
    """Convert 0-100 total score to 1-5 star rating."""
    normalized = total_score / 20  # Scale 0-100 to 0-5
    if normalized <= 1:
        return '★☆☆☆☆'
    elif normalized <= 2:
        return '★★☆☆☆'
    elif normalized <= 3:
        return '★★★☆☆'
    elif normalized <= 4:
        return '★★★★☆'
    else:
        return '★★★★★'

def evaluate_investment(ticker, horizon_months=12):
    """Evaluate the company with Morningstar-inspired presentation."""
    hist, fundamentals, ticker = get_stock_data(ticker)
    sentiment, sentiment_note = get_sentiment(ticker)
    headlines = get_news_headlines(ticker, fundamentals['Company_Name'])
    df = prepare_data(hist, fundamentals, sentiment, horizon_months)
    
    model, scaler, score = train_model(df)
    
    latest_data = df.drop(['Future_Return', 'Close'], axis=1).iloc[-1:]
    latest_scaled = scaler.transform(latest_data)
    predicted_return = model.predict(latest_scaled)[0]
    
    # Volatility scaling
    market_volatility = 0.02  # Approximate S&P 500 daily volatility
    volatility_factor = latest_data['Volatility'].iloc[0] / market_volatility
    predicted_return = predicted_return / max(volatility_factor, 1.0)
    
    # Clip predicted return
    predicted_return = np.clip(predicted_return, -0.5, 0.5)
    capped_note = " (Capped at 50% due to model constraints)" if predicted_return == 0.5 else " (Capped at -50% due to model constraints)" if predicted_return == -0.5 else ""
    
    # Scoring system
    explanation = ""
    score_dict = {}
    if sentiment is not None:
        score_dict = {
            'Predicted_Return': {
                'value': predicted_return * 100,
                'score': min(max(0, predicted_return / 0.2 * 10), 10),
                'note': f"Expected percentage change in stock price over the horizon. {'Favorable' if predicted_return >= 0 else 'Unfavorable, contributes 0 points'}{capped_note}",
                'weight': 25
            },
            'PE_Ratio': {
                'value': fundamentals['PE_Ratio'],
                'score': max(0, (30 - fundamentals['PE_Ratio']) / 30 * 10),
                'note': 'Slightly above average, lower is better',
                'weight': 10
            },
            'EPS': {
                'value': fundamentals['EPS'],
                'score': min(fundamentals['EPS'] / 5 * 10, 10),
                'note': '',
                'weight': 10
            },
            'Revenue_Growth': {
                'value': fundamentals['Revenue_Growth'] * 100,
                'score': min(fundamentals['Revenue_Growth'] / 0.3 * 10, 10),
                'note': '',
                'weight': 10
            },
            'Free_Cash_Flow': {
                'value': (fundamentals['Free_Cash_Flow'] / fundamentals['Market_Cap'] * 100),
                'score': min(fundamentals['Free_Cash_Flow'] / fundamentals['Market_Cap'] / 0.05 * 10, 10),
                'note': 'Yield',
                'weight': 10
            },
            'ROE': {
                'value': fundamentals['ROE'] * 100,
                'score': min(fundamentals['ROE'] / 0.5 * 10, 10),
                'note': '',
                'weight': 10
            },
            'Debt_to_Equity': {
                'value': fundamentals['Debt_to_Equity'],
                'score': max(0, (2 - fundamentals['Debt_to_Equity']) / 2 * 10),
                'note': 'Favorable, lower is better',
                'weight': 5
            },
            'Sentiment': {
                'value': sentiment,
                'score': sentiment,
                'note': sentiment_note,
                'weight': 10
            },
            'Model_Accuracy': {
                'value': score * 100,
                'score': min(score * 10, 10),
                'note': f'High model reliability, R²: {score*100:.0f}%',
                'weight': 5
            },
            'Sector_Resilience': {
                'value': get_sector_resilience(fundamentals['Sector']),
                'score': get_sector_resilience(fundamentals['Sector']),
                'note': 'Resilient sector outlook' if get_sector_resilience(fundamentals['Sector']) > 5 else 'Moderate sector outlook',
                'weight': 10
            }
        }
    else:
        score_dict = {
            'Predicted_Return': {
                'value': predicted_return * 100,
                'score': min(max(0, predicted_return / 0.2 * 10), 10),
                'note': f"Expected percentage change in stock price over the horizon. {'Favorable' if predicted_return >= 0 else 'Unfavorable, contributes 0 points'}{capped_note}",
                'weight': 27.78
            },
            'PE_Ratio': {
                'value': fundamentals['PE_Ratio'],
                'score': max(0, (30 - fundamentals['PE_Ratio']) / 30 * 10),
                'note': 'Slightly above average, lower is better',
                'weight': 11.11
            },
            'EPS': {
                'value': fundamentals['EPS'],
                'score': min(fundamentals['EPS'] / 5 * 10, 10),
                'note': '',
                'weight': 11.11
            },
            'Revenue_Growth': {
                'value': fundamentals['Revenue_Growth'] * 100,
                'score': min(fundamentals['Revenue_Growth'] / 0.3 * 10, 10),
                'note': '',
                'weight': 11.11
            },
            'Free_Cash_Flow': {
                'value': (fundamentals['Free_Cash_Flow'] / fundamentals['Market_Cap'] * 100),
                'score': min(fundamentals['Free_Cash_Flow'] / fundamentals['Market_Cap'] / 0.05 * 10, 10),
                'note': 'Yield',
                'weight': 11.11
            },
            'ROE': {
                'value': fundamentals['ROE'] * 100,
                'score': min(fundamentals['ROE'] / 0.5 * 10, 10),
                'note': '',
                'weight': 11.11
            },
            'Debt_to_Equity': {
                'value': fundamentals['Debt_to_Equity'],
                'score': max(0, (2 - fundamentals['Debt_to_Equity']) / 2 * 10),
                'note': 'Favorable, lower is better',
                'weight': 5.56
            },
            'Model_Accuracy': {
                'value': score * 100,
                'score': min(score * 10, 10),
                'note': f'High model reliability, R²: {score*100:.0f}%',
                'weight': 5.56
            },
            'Sector_Resilience': {
                'value': get_sector_resilience(fundamentals['Sector']),
                'score': get_sector_resilience(fundamentals['Sector']),
                'note': 'Resilient sector outlook' if get_sector_resilience(fundamentals['Sector']) > 5 else 'Moderate sector outlook',
                'weight': 11.11
            }
        }
        explanation = "Note: Sentiment data was not available or failed to retrieve. The Sentiment component (10% weight) was removed, and its weight was redistributed proportionally."
    
    total_score = sum(item['score'] * item['weight'] / 10 for item in score_dict.values())
    recommendation = "Strong Buy" if total_score > 75 else "Buy" if total_score > 50 else "Hold" if total_score > 25 else "Sell"
    
    return {
        'Ticker': ticker,
        'Total_Score': round(total_score, 2),
        'Recommendation': recommendation,
        'Details': score_dict,
        'Explanation': explanation,
        'Headlines': headlines,
        'Sector': fundamentals['Sector']
    }

def display_results(result):
    """Display results with summary table and news headlines with links."""
    print(f"Investment Analysis for {result['Ticker']} (Horizon: {horizon_dropdown.value} months):")
    print(f"Total Score: {result['Total_Score']}/100 ({total_score_to_stars(result['Total_Score'])})")
    print(f"Recommendation: {result['Recommendation']}")
    
    # Summary Table
    print("\nSummary Table:")
    print("| Component          | Value/Score | Stars      | Note                              |")
    print("|--------------------|-------------|------------|-----------------------------------|")
    for key, item in result['Details'].items():
        if key in ['Predicted_Return', 'Revenue_Growth', 'Free_Cash_Flow', 'ROE']:
            value_str = f"{item['value']:.2f}%"
        elif key == 'EPS':
            value_str = f"${item['value']:.2f}"
        elif key in ['Sentiment', 'Model_Accuracy', 'Sector_Resilience']:
            value_str = f"{item['value']:.1f}/10"
        else:
            value_str = f"{item['value']:.2f}"
        stars = score_to_stars(item['score'])
        note = item['note'] if item['note'] else ''
        print(f"| {key:<18} | {value_str:<11} | {stars:<10} | {note:<33} |")
    
    print(f"\nNote: Stars reflect performance (★★★★★ Excellent, ★☆☆☆☆ Poor). Total score stars indicate overall investment quality. Sentiment is based on recent news headlines from Yahoo Finance, reflecting market and analyst opinions. Higher values are generally better, except for PE_Ratio and Debt_to_Equity (lower is better). Predicted_Return < 0 contributes 0 points.")
    
    if result['Explanation']:
        print(f"\n{result['Explanation']}")
    
    # Recent News Headlines
    print(f"\nRecent News Headlines:")
    print(f"Recent news impacting {result['Ticker']} and its {result['Sector']} sector:")
    if result['Headlines']:
        for i, headline in enumerate(result['Headlines'], 1):
            print(f"{i}. \"{headline['title']}\" - {headline['source']}, {headline['date']}, {headline['url']}")
        if len(result['Headlines']) < 5:
            print("No other recent headlines found.")
    else:
        print(f"No recent news headlines found for {result['Ticker']}.")
        print("Note: NewsAPI key may be invalid or rate-limited. Please obtain a new key at https://newsapi.org/.")

# Create interactive widgets
horizon_dropdown = widgets.Dropdown(
    options=[1, 3, 6, 12, 24],
    value=12,
    description='Horizon (months):',
    layout={'width': '300px'}
)

ticker_input = widgets.Text(
    value='',
    placeholder='Enter ticker (e.g., THEON.AS, AAPL)',
    description='Ticker:',
    layout={'width': '500px'}
)

analyze_button = widgets.Button(
    description='Analyze Stock',
    button_style='success',
    tooltip='Click to analyze the stock',
    icon='chart-line'
)

output = widgets.Output()

def on_analyze_button_clicked(b):
    with output:
        clear_output()
        ticker = ticker_input.value.strip().upper()
        horizon_months = horizon_dropdown.value
        if not ticker:
            print("Please enter a ticker.")
            return
        try:
            result = evaluate_investment(ticker, horizon_months)
            display_results(result)
        except Exception as e:
            print(f"Error analyzing ticker {ticker}: {str(e)}")

analyze_button.on_click(on_analyze_button_clicked)

# Display the app
display(horizon_dropdown, ticker_input, analyze_button, output)
